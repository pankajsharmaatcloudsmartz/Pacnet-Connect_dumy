/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.pacnet.connect.model.SMARadcheck;
import com.pacnet.connect.model.SMARadcheckModel;
import com.pacnet.connect.model.SMARadcheckSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SMARadcheck service. Represents a row in the &quot;PA_SMA_radcheck&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.SMARadcheckModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMARadcheckImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see SMARadcheckImpl
 * @see com.pacnet.connect.model.SMARadcheck
 * @see com.pacnet.connect.model.SMARadcheckModel
 * @generated
 */
@JSON(strict = true)
public class SMARadcheckModelImpl extends BaseModelImpl<SMARadcheck>
	implements SMARadcheckModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s m a radcheck model instance should use the {@link com.pacnet.connect.model.SMARadcheck} interface instead.
	 */
	public static final String TABLE_NAME = "PA_SMA_radcheck";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "company_id", Types.BIGINT },
			{ "username", Types.VARCHAR },
			{ "attribute", Types.VARCHAR },
			{ "op", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "IsAdmin", Types.INTEGER },
			{ "IsActive", Types.INTEGER },
			{ "Created_On", Types.TIMESTAMP },
			{ "Created_By", Types.VARCHAR },
			{ "Updated_On", Types.TIMESTAMP },
			{ "Updated_By", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PA_SMA_radcheck (id LONG not null primary key IDENTITY,company_id LONG,username VARCHAR(75) null,attribute VARCHAR(75) null,op VARCHAR(75) null,value VARCHAR(75) null,IsAdmin INTEGER,IsActive INTEGER,Created_On DATE null,Created_By VARCHAR(75) null,Updated_On DATE null,Updated_By VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PA_SMA_radcheck";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.SMARadcheck"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.SMARadcheck"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.SMARadcheck"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long ISACTIVE_COLUMN_BITMASK = 2L;
	public static long ISADMIN_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SMARadcheck toModel(SMARadcheckSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SMARadcheck model = new SMARadcheckImpl();

		model.setId(soapModel.getId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUsername(soapModel.getUsername());
		model.setAttribute(soapModel.getAttribute());
		model.setOp(soapModel.getOp());
		model.setValue(soapModel.getValue());
		model.setIsAdmin(soapModel.getIsAdmin());
		model.setIsActive(soapModel.getIsActive());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedOn(soapModel.getUpdatedOn());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SMARadcheck> toModels(SMARadcheckSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SMARadcheck> models = new ArrayList<SMARadcheck>(soapModels.length);

		for (SMARadcheckSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.SMARadcheck"));

	public SMARadcheckModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return SMARadcheck.class;
	}

	public String getModelClassName() {
		return SMARadcheck.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("companyId", getCompanyId());
		attributes.put("username", getUsername());
		attributes.put("attribute", getAttribute());
		attributes.put("op", getOp());
		attributes.put("value", getValue());
		attributes.put("isAdmin", getIsAdmin());
		attributes.put("isActive", getIsActive());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedOn", getUpdatedOn());
		attributes.put("updatedBy", getUpdatedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String username = (String)attributes.get("username");

		if (username != null) {
			setUsername(username);
		}

		String attribute = (String)attributes.get("attribute");

		if (attribute != null) {
			setAttribute(attribute);
		}

		String op = (String)attributes.get("op");

		if (op != null) {
			setOp(op);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Integer isAdmin = (Integer)attributes.get("isAdmin");

		if (isAdmin != null) {
			setIsAdmin(isAdmin);
		}

		Integer isActive = (Integer)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedOn = (Date)attributes.get("updatedOn");

		if (updatedOn != null) {
			setUpdatedOn(updatedOn);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public String getUsername() {
		if (_username == null) {
			return StringPool.BLANK;
		}
		else {
			return _username;
		}
	}

	public void setUsername(String username) {
		_username = username;
	}

	@JSON
	public String getAttribute() {
		if (_attribute == null) {
			return StringPool.BLANK;
		}
		else {
			return _attribute;
		}
	}

	public void setAttribute(String attribute) {
		_attribute = attribute;
	}

	@JSON
	public String getOp() {
		if (_op == null) {
			return StringPool.BLANK;
		}
		else {
			return _op;
		}
	}

	public void setOp(String op) {
		_op = op;
	}

	@JSON
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	public void setValue(String value) {
		_value = value;
	}

	@JSON
	public int getIsAdmin() {
		return _isAdmin;
	}

	public void setIsAdmin(int isAdmin) {
		_columnBitmask |= ISADMIN_COLUMN_BITMASK;

		if (!_setOriginalIsAdmin) {
			_setOriginalIsAdmin = true;

			_originalIsAdmin = _isAdmin;
		}

		_isAdmin = isAdmin;
	}

	public int getOriginalIsAdmin() {
		return _originalIsAdmin;
	}

	@JSON
	public int getIsActive() {
		return _isActive;
	}

	public void setIsActive(int isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public int getOriginalIsActive() {
		return _originalIsActive;
	}

	@JSON
	public Date getCreatedOn() {
		return _createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	public Date getUpdatedOn() {
		return _updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		_updatedOn = updatedOn;
	}

	@JSON
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SMARadcheck.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SMARadcheck toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (SMARadcheck)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		SMARadcheckImpl smaRadcheckImpl = new SMARadcheckImpl();

		smaRadcheckImpl.setId(getId());
		smaRadcheckImpl.setCompanyId(getCompanyId());
		smaRadcheckImpl.setUsername(getUsername());
		smaRadcheckImpl.setAttribute(getAttribute());
		smaRadcheckImpl.setOp(getOp());
		smaRadcheckImpl.setValue(getValue());
		smaRadcheckImpl.setIsAdmin(getIsAdmin());
		smaRadcheckImpl.setIsActive(getIsActive());
		smaRadcheckImpl.setCreatedOn(getCreatedOn());
		smaRadcheckImpl.setCreatedBy(getCreatedBy());
		smaRadcheckImpl.setUpdatedOn(getUpdatedOn());
		smaRadcheckImpl.setUpdatedBy(getUpdatedBy());

		smaRadcheckImpl.resetOriginalValues();

		return smaRadcheckImpl;
	}

	public int compareTo(SMARadcheck smaRadcheck) {
		long primaryKey = smaRadcheck.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SMARadcheck smaRadcheck = null;

		try {
			smaRadcheck = (SMARadcheck)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = smaRadcheck.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SMARadcheckModelImpl smaRadcheckModelImpl = this;

		smaRadcheckModelImpl._originalCompanyId = smaRadcheckModelImpl._companyId;

		smaRadcheckModelImpl._setOriginalCompanyId = false;

		smaRadcheckModelImpl._originalIsAdmin = smaRadcheckModelImpl._isAdmin;

		smaRadcheckModelImpl._setOriginalIsAdmin = false;

		smaRadcheckModelImpl._originalIsActive = smaRadcheckModelImpl._isActive;

		smaRadcheckModelImpl._setOriginalIsActive = false;

		smaRadcheckModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SMARadcheck> toCacheModel() {
		SMARadcheckCacheModel smaRadcheckCacheModel = new SMARadcheckCacheModel();

		smaRadcheckCacheModel.id = getId();

		smaRadcheckCacheModel.companyId = getCompanyId();

		smaRadcheckCacheModel.username = getUsername();

		String username = smaRadcheckCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			smaRadcheckCacheModel.username = null;
		}

		smaRadcheckCacheModel.attribute = getAttribute();

		String attribute = smaRadcheckCacheModel.attribute;

		if ((attribute != null) && (attribute.length() == 0)) {
			smaRadcheckCacheModel.attribute = null;
		}

		smaRadcheckCacheModel.op = getOp();

		String op = smaRadcheckCacheModel.op;

		if ((op != null) && (op.length() == 0)) {
			smaRadcheckCacheModel.op = null;
		}

		smaRadcheckCacheModel.value = getValue();

		String value = smaRadcheckCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			smaRadcheckCacheModel.value = null;
		}

		smaRadcheckCacheModel.isAdmin = getIsAdmin();

		smaRadcheckCacheModel.isActive = getIsActive();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			smaRadcheckCacheModel.createdOn = createdOn.getTime();
		}
		else {
			smaRadcheckCacheModel.createdOn = Long.MIN_VALUE;
		}

		smaRadcheckCacheModel.createdBy = getCreatedBy();

		String createdBy = smaRadcheckCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			smaRadcheckCacheModel.createdBy = null;
		}

		Date updatedOn = getUpdatedOn();

		if (updatedOn != null) {
			smaRadcheckCacheModel.updatedOn = updatedOn.getTime();
		}
		else {
			smaRadcheckCacheModel.updatedOn = Long.MIN_VALUE;
		}

		smaRadcheckCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = smaRadcheckCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			smaRadcheckCacheModel.updatedBy = null;
		}

		return smaRadcheckCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", username=");
		sb.append(getUsername());
		sb.append(", attribute=");
		sb.append(getAttribute());
		sb.append(", op=");
		sb.append(getOp());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", isAdmin=");
		sb.append(getIsAdmin());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedOn=");
		sb.append(getUpdatedOn());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.SMARadcheck");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>username</column-name><column-value><![CDATA[");
		sb.append(getUsername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attribute</column-name><column-value><![CDATA[");
		sb.append(getAttribute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>op</column-name><column-value><![CDATA[");
		sb.append(getOp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isAdmin</column-name><column-value><![CDATA[");
		sb.append(getIsAdmin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedOn</column-name><column-value><![CDATA[");
		sb.append(getUpdatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SMARadcheck.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			SMARadcheck.class
		};
	private long _id;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _username;
	private String _attribute;
	private String _op;
	private String _value;
	private int _isAdmin;
	private int _originalIsAdmin;
	private boolean _setOriginalIsAdmin;
	private int _isActive;
	private int _originalIsActive;
	private boolean _setOriginalIsActive;
	private Date _createdOn;
	private String _createdBy;
	private Date _updatedOn;
	private String _updatedBy;
	private long _columnBitmask;
	private SMARadcheck _escapedModelProxy;
}
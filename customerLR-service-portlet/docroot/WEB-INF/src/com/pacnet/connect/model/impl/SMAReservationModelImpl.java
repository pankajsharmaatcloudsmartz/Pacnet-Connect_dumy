/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.pacnet.connect.model.SMAReservation;
import com.pacnet.connect.model.SMAReservationModel;
import com.pacnet.connect.model.SMAReservationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SMAReservation service. Represents a row in the &quot;PA_SMA_reservation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.SMAReservationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMAReservationImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see SMAReservationImpl
 * @see com.pacnet.connect.model.SMAReservation
 * @see com.pacnet.connect.model.SMAReservationModel
 * @generated
 */
@JSON(strict = true)
public class SMAReservationModelImpl extends BaseModelImpl<SMAReservation>
	implements SMAReservationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s m a reservation model instance should use the {@link com.pacnet.connect.model.SMAReservation} interface instead.
	 */
	public static final String TABLE_NAME = "PA_SMA_reservation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "owner", Types.VARCHAR },
			{ "provision", Types.INTEGER },
			{ "IsActive", Types.INTEGER },
			{ "Created_On", Types.TIMESTAMP },
			{ "Created_By", Types.VARCHAR },
			{ "Updated_On", Types.TIMESTAMP },
			{ "Updated_By", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PA_SMA_reservation (id LONG not null primary key IDENTITY,name VARCHAR(75) null,startDate DATE null,endDate DATE null,owner VARCHAR(75) null,provision INTEGER,IsActive INTEGER,Created_On DATE null,Created_By VARCHAR(75) null,Updated_On DATE null,Updated_By VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PA_SMA_reservation";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.SMAReservation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.SMAReservation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.SMAReservation"),
			true);
	public static long CREATEDBY_COLUMN_BITMASK = 1L;
	public static long ENDDATE_COLUMN_BITMASK = 2L;
	public static long ISACTIVE_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static long OWNER_COLUMN_BITMASK = 16L;
	public static long PROVISION_COLUMN_BITMASK = 32L;
	public static long STARTDATE_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SMAReservation toModel(SMAReservationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SMAReservation model = new SMAReservationImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setOwner(soapModel.getOwner());
		model.setProvision(soapModel.getProvision());
		model.setIsActive(soapModel.getIsActive());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedOn(soapModel.getUpdatedOn());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SMAReservation> toModels(SMAReservationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SMAReservation> models = new ArrayList<SMAReservation>(soapModels.length);

		for (SMAReservationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.SMAReservation"));

	public SMAReservationModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return SMAReservation.class;
	}

	public String getModelClassName() {
		return SMAReservation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("name", getName());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("owner", getOwner());
		attributes.put("provision", getProvision());
		attributes.put("isActive", getIsActive());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedOn", getUpdatedOn());
		attributes.put("updatedBy", getUpdatedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String owner = (String)attributes.get("owner");

		if (owner != null) {
			setOwner(owner);
		}

		Integer provision = (Integer)attributes.get("provision");

		if (provision != null) {
			setProvision(provision);
		}

		Integer isActive = (Integer)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedOn = (Date)attributes.get("updatedOn");

		if (updatedOn != null) {
			setUpdatedOn(updatedOn);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_columnBitmask |= STARTDATE_COLUMN_BITMASK;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@JSON
	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@JSON
	public String getOwner() {
		if (_owner == null) {
			return StringPool.BLANK;
		}
		else {
			return _owner;
		}
	}

	public void setOwner(String owner) {
		_columnBitmask |= OWNER_COLUMN_BITMASK;

		if (_originalOwner == null) {
			_originalOwner = _owner;
		}

		_owner = owner;
	}

	public String getOriginalOwner() {
		return GetterUtil.getString(_originalOwner);
	}

	@JSON
	public int getProvision() {
		return _provision;
	}

	public void setProvision(int provision) {
		_columnBitmask |= PROVISION_COLUMN_BITMASK;

		if (!_setOriginalProvision) {
			_setOriginalProvision = true;

			_originalProvision = _provision;
		}

		_provision = provision;
	}

	public int getOriginalProvision() {
		return _originalProvision;
	}

	@JSON
	public int getIsActive() {
		return _isActive;
	}

	public void setIsActive(int isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public int getOriginalIsActive() {
		return _originalIsActive;
	}

	@JSON
	public Date getCreatedOn() {
		return _createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	public void setCreatedBy(String createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (_originalCreatedBy == null) {
			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public String getOriginalCreatedBy() {
		return GetterUtil.getString(_originalCreatedBy);
	}

	@JSON
	public Date getUpdatedOn() {
		return _updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		_updatedOn = updatedOn;
	}

	@JSON
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SMAReservation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SMAReservation toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (SMAReservation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		SMAReservationImpl smaReservationImpl = new SMAReservationImpl();

		smaReservationImpl.setId(getId());
		smaReservationImpl.setName(getName());
		smaReservationImpl.setStartDate(getStartDate());
		smaReservationImpl.setEndDate(getEndDate());
		smaReservationImpl.setOwner(getOwner());
		smaReservationImpl.setProvision(getProvision());
		smaReservationImpl.setIsActive(getIsActive());
		smaReservationImpl.setCreatedOn(getCreatedOn());
		smaReservationImpl.setCreatedBy(getCreatedBy());
		smaReservationImpl.setUpdatedOn(getUpdatedOn());
		smaReservationImpl.setUpdatedBy(getUpdatedBy());

		smaReservationImpl.resetOriginalValues();

		return smaReservationImpl;
	}

	public int compareTo(SMAReservation smaReservation) {
		long primaryKey = smaReservation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SMAReservation smaReservation = null;

		try {
			smaReservation = (SMAReservation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = smaReservation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SMAReservationModelImpl smaReservationModelImpl = this;

		smaReservationModelImpl._originalName = smaReservationModelImpl._name;

		smaReservationModelImpl._originalStartDate = smaReservationModelImpl._startDate;

		smaReservationModelImpl._originalEndDate = smaReservationModelImpl._endDate;

		smaReservationModelImpl._originalOwner = smaReservationModelImpl._owner;

		smaReservationModelImpl._originalProvision = smaReservationModelImpl._provision;

		smaReservationModelImpl._setOriginalProvision = false;

		smaReservationModelImpl._originalIsActive = smaReservationModelImpl._isActive;

		smaReservationModelImpl._setOriginalIsActive = false;

		smaReservationModelImpl._originalCreatedBy = smaReservationModelImpl._createdBy;

		smaReservationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SMAReservation> toCacheModel() {
		SMAReservationCacheModel smaReservationCacheModel = new SMAReservationCacheModel();

		smaReservationCacheModel.id = getId();

		smaReservationCacheModel.name = getName();

		String name = smaReservationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			smaReservationCacheModel.name = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			smaReservationCacheModel.startDate = startDate.getTime();
		}
		else {
			smaReservationCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			smaReservationCacheModel.endDate = endDate.getTime();
		}
		else {
			smaReservationCacheModel.endDate = Long.MIN_VALUE;
		}

		smaReservationCacheModel.owner = getOwner();

		String owner = smaReservationCacheModel.owner;

		if ((owner != null) && (owner.length() == 0)) {
			smaReservationCacheModel.owner = null;
		}

		smaReservationCacheModel.provision = getProvision();

		smaReservationCacheModel.isActive = getIsActive();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			smaReservationCacheModel.createdOn = createdOn.getTime();
		}
		else {
			smaReservationCacheModel.createdOn = Long.MIN_VALUE;
		}

		smaReservationCacheModel.createdBy = getCreatedBy();

		String createdBy = smaReservationCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			smaReservationCacheModel.createdBy = null;
		}

		Date updatedOn = getUpdatedOn();

		if (updatedOn != null) {
			smaReservationCacheModel.updatedOn = updatedOn.getTime();
		}
		else {
			smaReservationCacheModel.updatedOn = Long.MIN_VALUE;
		}

		smaReservationCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = smaReservationCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			smaReservationCacheModel.updatedBy = null;
		}

		return smaReservationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", owner=");
		sb.append(getOwner());
		sb.append(", provision=");
		sb.append(getProvision());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedOn=");
		sb.append(getUpdatedOn());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.SMAReservation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>owner</column-name><column-value><![CDATA[");
		sb.append(getOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provision</column-name><column-value><![CDATA[");
		sb.append(getProvision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedOn</column-name><column-value><![CDATA[");
		sb.append(getUpdatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SMAReservation.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			SMAReservation.class
		};
	private long _id;
	private String _name;
	private String _originalName;
	private Date _startDate;
	private Date _originalStartDate;
	private Date _endDate;
	private Date _originalEndDate;
	private String _owner;
	private String _originalOwner;
	private int _provision;
	private int _originalProvision;
	private boolean _setOriginalProvision;
	private int _isActive;
	private int _originalIsActive;
	private boolean _setOriginalIsActive;
	private Date _createdOn;
	private String _createdBy;
	private String _originalCreatedBy;
	private Date _updatedOn;
	private String _updatedBy;
	private long _columnBitmask;
	private SMAReservation _escapedModelProxy;
}
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.pacnet.connect.model.SMACompanyList;
import com.pacnet.connect.model.SMACompanyListModel;
import com.pacnet.connect.model.SMACompanyListSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SMACompanyList service. Represents a row in the &quot;v_i_sma_user_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.SMACompanyListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMACompanyListImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see SMACompanyListImpl
 * @see com.pacnet.connect.model.SMACompanyList
 * @see com.pacnet.connect.model.SMACompanyListModel
 * @generated
 */
@JSON(strict = true)
public class SMACompanyListModelImpl extends BaseModelImpl<SMACompanyList>
	implements SMACompanyListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s m a company list model instance should use the {@link com.pacnet.connect.model.SMACompanyList} interface instead.
	 */
	public static final String TABLE_NAME = "v_i_sma_user_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.VARCHAR },
			{ "adminUserId", Types.BIGINT },
			{ "company_id", Types.BIGINT },
			{ "customer_id", Types.BIGINT },
			{ "domains", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table v_i_sma_user_details (id VARCHAR(75) not null primary key,adminUserId LONG,company_id LONG,customer_id LONG,domains VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table v_i_sma_user_details";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.SMACompanyList"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.SMACompanyList"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.SMACompanyList"),
			true);
	public static long ADMINUSERID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long CUSTOMERID_COLUMN_BITMASK = 4L;
	public static long DOMAINS_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SMACompanyList toModel(SMACompanyListSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SMACompanyList model = new SMACompanyListImpl();

		model.setId(soapModel.getId());
		model.setAdminUserId(soapModel.getAdminUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCustomerId(soapModel.getCustomerId());
		model.setDomains(soapModel.getDomains());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SMACompanyList> toModels(SMACompanyListSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SMACompanyList> models = new ArrayList<SMACompanyList>(soapModels.length);

		for (SMACompanyListSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.SMACompanyList"));

	public SMACompanyListModelImpl() {
	}

	public String getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return SMACompanyList.class;
	}

	public String getModelClassName() {
		return SMACompanyList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("adminUserId", getAdminUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("customerId", getCustomerId());
		attributes.put("domains", getDomains());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String id = (String)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long adminUserId = (Long)attributes.get("adminUserId");

		if (adminUserId != null) {
			setAdminUserId(adminUserId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long customerId = (Long)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}

		String domains = (String)attributes.get("domains");

		if (domains != null) {
			setDomains(domains);
		}
	}

	@JSON
	public String getId() {
		if (_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _id;
		}
	}

	public void setId(String id) {
		_id = id;
	}

	@JSON
	public long getAdminUserId() {
		return _adminUserId;
	}

	public void setAdminUserId(long adminUserId) {
		_columnBitmask |= ADMINUSERID_COLUMN_BITMASK;

		if (!_setOriginalAdminUserId) {
			_setOriginalAdminUserId = true;

			_originalAdminUserId = _adminUserId;
		}

		_adminUserId = adminUserId;
	}

	public String getAdminUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getAdminUserId(), "uuid", _adminUserUuid);
	}

	public void setAdminUserUuid(String adminUserUuid) {
		_adminUserUuid = adminUserUuid;
	}

	public long getOriginalAdminUserId() {
		return _originalAdminUserId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getCustomerId() {
		return _customerId;
	}

	public void setCustomerId(long customerId) {
		_columnBitmask |= CUSTOMERID_COLUMN_BITMASK;

		if (!_setOriginalCustomerId) {
			_setOriginalCustomerId = true;

			_originalCustomerId = _customerId;
		}

		_customerId = customerId;
	}

	public long getOriginalCustomerId() {
		return _originalCustomerId;
	}

	@JSON
	public String getDomains() {
		if (_domains == null) {
			return StringPool.BLANK;
		}
		else {
			return _domains;
		}
	}

	public void setDomains(String domains) {
		_columnBitmask |= DOMAINS_COLUMN_BITMASK;

		if (_originalDomains == null) {
			_originalDomains = _domains;
		}

		_domains = domains;
	}

	public String getOriginalDomains() {
		return GetterUtil.getString(_originalDomains);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public SMACompanyList toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (SMACompanyList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		SMACompanyListImpl smaCompanyListImpl = new SMACompanyListImpl();

		smaCompanyListImpl.setId(getId());
		smaCompanyListImpl.setAdminUserId(getAdminUserId());
		smaCompanyListImpl.setCompanyId(getCompanyId());
		smaCompanyListImpl.setCustomerId(getCustomerId());
		smaCompanyListImpl.setDomains(getDomains());

		smaCompanyListImpl.resetOriginalValues();

		return smaCompanyListImpl;
	}

	public int compareTo(SMACompanyList smaCompanyList) {
		String primaryKey = smaCompanyList.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SMACompanyList smaCompanyList = null;

		try {
			smaCompanyList = (SMACompanyList)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = smaCompanyList.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		SMACompanyListModelImpl smaCompanyListModelImpl = this;

		smaCompanyListModelImpl._originalAdminUserId = smaCompanyListModelImpl._adminUserId;

		smaCompanyListModelImpl._setOriginalAdminUserId = false;

		smaCompanyListModelImpl._originalCompanyId = smaCompanyListModelImpl._companyId;

		smaCompanyListModelImpl._setOriginalCompanyId = false;

		smaCompanyListModelImpl._originalCustomerId = smaCompanyListModelImpl._customerId;

		smaCompanyListModelImpl._setOriginalCustomerId = false;

		smaCompanyListModelImpl._originalDomains = smaCompanyListModelImpl._domains;

		smaCompanyListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SMACompanyList> toCacheModel() {
		SMACompanyListCacheModel smaCompanyListCacheModel = new SMACompanyListCacheModel();

		smaCompanyListCacheModel.id = getId();

		String id = smaCompanyListCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			smaCompanyListCacheModel.id = null;
		}

		smaCompanyListCacheModel.adminUserId = getAdminUserId();

		smaCompanyListCacheModel.companyId = getCompanyId();

		smaCompanyListCacheModel.customerId = getCustomerId();

		smaCompanyListCacheModel.domains = getDomains();

		String domains = smaCompanyListCacheModel.domains;

		if ((domains != null) && (domains.length() == 0)) {
			smaCompanyListCacheModel.domains = null;
		}

		return smaCompanyListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", adminUserId=");
		sb.append(getAdminUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", customerId=");
		sb.append(getCustomerId());
		sb.append(", domains=");
		sb.append(getDomains());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.SMACompanyList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminUserId</column-name><column-value><![CDATA[");
		sb.append(getAdminUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>domains</column-name><column-value><![CDATA[");
		sb.append(getDomains());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SMACompanyList.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			SMACompanyList.class
		};
	private String _id;
	private long _adminUserId;
	private String _adminUserUuid;
	private long _originalAdminUserId;
	private boolean _setOriginalAdminUserId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _customerId;
	private long _originalCustomerId;
	private boolean _setOriginalCustomerId;
	private String _domains;
	private String _originalDomains;
	private long _columnBitmask;
	private SMACompanyList _escapedModelProxy;
}
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.pacnet.connect.model.AccessRequest;
import com.pacnet.connect.model.AccessRequestModel;
import com.pacnet.connect.model.AccessRequestSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AccessRequest service. Represents a row in the &quot;Access_Request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.AccessRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccessRequestImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see AccessRequestImpl
 * @see com.pacnet.connect.model.AccessRequest
 * @see com.pacnet.connect.model.AccessRequestModel
 * @generated
 */
@JSON(strict = true)
public class AccessRequestModelImpl extends BaseModelImpl<AccessRequest>
	implements AccessRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a access request model instance should use the {@link com.pacnet.connect.model.AccessRequest} interface instead.
	 */
	public static final String TABLE_NAME = "Access_Request";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "Facility_ID", Types.BIGINT },
			{ "Customer_ID", Types.BIGINT },
			{ "visitor_ID", Types.BIGINT },
			{ "Access_Request_Status_ID", Types.BIGINT },
			{ "Date_Of_Visit", Types.TIMESTAMP },
			{ "Tentative_Time_In", Types.BIGINT },
			{ "Tentative_Time_Out", Types.BIGINT },
			{ "Note", Types.VARCHAR },
			{ "Is_External_Visitor", Types.BOOLEAN },
			{ "IsActive", Types.BOOLEAN },
			{ "One_Time_Access", Types.BOOLEAN },
			{ "Date_Of_Visit_Gmt", Types.TIMESTAMP },
			{ "Date_Of_Time_Out_Gmt", Types.TIMESTAMP },
			{ "Created_On", Types.TIMESTAMP },
			{ "Created_By", Types.VARCHAR },
			{ "Updated_On", Types.TIMESTAMP },
			{ "Updated_By", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Access_Request (ID LONG not null primary key IDENTITY,Facility_ID LONG,Customer_ID LONG,visitor_ID LONG,Access_Request_Status_ID LONG,Date_Of_Visit DATE null,Tentative_Time_In LONG,Tentative_Time_Out LONG,Note VARCHAR(75) null,Is_External_Visitor BOOLEAN,IsActive BOOLEAN,One_Time_Access BOOLEAN,Date_Of_Visit_Gmt DATE null,Date_Of_Time_Out_Gmt DATE null,Created_On DATE null,Created_By VARCHAR(75) null,Updated_On DATE null,Updated_By VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Access_Request";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.AccessRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.AccessRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.AccessRequest"),
			true);
	public static long CUSTOMERID_COLUMN_BITMASK = 1L;
	public static long FACILITYID_COLUMN_BITMASK = 2L;
	public static long VISITORID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AccessRequest toModel(AccessRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AccessRequest model = new AccessRequestImpl();

		model.setId(soapModel.getId());
		model.setFacilityId(soapModel.getFacilityId());
		model.setCustomerId(soapModel.getCustomerId());
		model.setVisitorId(soapModel.getVisitorId());
		model.setAccessRequestStatusId(soapModel.getAccessRequestStatusId());
		model.setDateOfVisit(soapModel.getDateOfVisit());
		model.setTentativeTimeIn(soapModel.getTentativeTimeIn());
		model.setTentativeTimeOut(soapModel.getTentativeTimeOut());
		model.setNote(soapModel.getNote());
		model.setIsExternalVisitor(soapModel.getIsExternalVisitor());
		model.setIsActive(soapModel.getIsActive());
		model.setOneTimeAccess(soapModel.getOneTimeAccess());
		model.setDateOfVisitGmt(soapModel.getDateOfVisitGmt());
		model.setDateOfTimeOutGmt(soapModel.getDateOfTimeOutGmt());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedOn(soapModel.getUpdatedOn());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AccessRequest> toModels(AccessRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AccessRequest> models = new ArrayList<AccessRequest>(soapModels.length);

		for (AccessRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.AccessRequest"));

	public AccessRequestModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AccessRequest.class;
	}

	public String getModelClassName() {
		return AccessRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("facilityId", getFacilityId());
		attributes.put("customerId", getCustomerId());
		attributes.put("visitorId", getVisitorId());
		attributes.put("accessRequestStatusId", getAccessRequestStatusId());
		attributes.put("dateOfVisit", getDateOfVisit());
		attributes.put("tentativeTimeIn", getTentativeTimeIn());
		attributes.put("tentativeTimeOut", getTentativeTimeOut());
		attributes.put("note", getNote());
		attributes.put("isExternalVisitor", getIsExternalVisitor());
		attributes.put("isActive", getIsActive());
		attributes.put("oneTimeAccess", getOneTimeAccess());
		attributes.put("dateOfVisitGmt", getDateOfVisitGmt());
		attributes.put("dateOfTimeOutGmt", getDateOfTimeOutGmt());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedOn", getUpdatedOn());
		attributes.put("updatedBy", getUpdatedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long facilityId = (Long)attributes.get("facilityId");

		if (facilityId != null) {
			setFacilityId(facilityId);
		}

		Long customerId = (Long)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}

		Long visitorId = (Long)attributes.get("visitorId");

		if (visitorId != null) {
			setVisitorId(visitorId);
		}

		Long accessRequestStatusId = (Long)attributes.get(
				"accessRequestStatusId");

		if (accessRequestStatusId != null) {
			setAccessRequestStatusId(accessRequestStatusId);
		}

		Date dateOfVisit = (Date)attributes.get("dateOfVisit");

		if (dateOfVisit != null) {
			setDateOfVisit(dateOfVisit);
		}

		Long tentativeTimeIn = (Long)attributes.get("tentativeTimeIn");

		if (tentativeTimeIn != null) {
			setTentativeTimeIn(tentativeTimeIn);
		}

		Long tentativeTimeOut = (Long)attributes.get("tentativeTimeOut");

		if (tentativeTimeOut != null) {
			setTentativeTimeOut(tentativeTimeOut);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Boolean isExternalVisitor = (Boolean)attributes.get("isExternalVisitor");

		if (isExternalVisitor != null) {
			setIsExternalVisitor(isExternalVisitor);
		}

		Boolean isActive = (Boolean)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Boolean oneTimeAccess = (Boolean)attributes.get("oneTimeAccess");

		if (oneTimeAccess != null) {
			setOneTimeAccess(oneTimeAccess);
		}

		Date dateOfVisitGmt = (Date)attributes.get("dateOfVisitGmt");

		if (dateOfVisitGmt != null) {
			setDateOfVisitGmt(dateOfVisitGmt);
		}

		Date dateOfTimeOutGmt = (Date)attributes.get("dateOfTimeOutGmt");

		if (dateOfTimeOutGmt != null) {
			setDateOfTimeOutGmt(dateOfTimeOutGmt);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedOn = (Date)attributes.get("updatedOn");

		if (updatedOn != null) {
			setUpdatedOn(updatedOn);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getFacilityId() {
		return _facilityId;
	}

	public void setFacilityId(long facilityId) {
		_columnBitmask |= FACILITYID_COLUMN_BITMASK;

		if (!_setOriginalFacilityId) {
			_setOriginalFacilityId = true;

			_originalFacilityId = _facilityId;
		}

		_facilityId = facilityId;
	}

	public long getOriginalFacilityId() {
		return _originalFacilityId;
	}

	@JSON
	public long getCustomerId() {
		return _customerId;
	}

	public void setCustomerId(long customerId) {
		_columnBitmask |= CUSTOMERID_COLUMN_BITMASK;

		if (!_setOriginalCustomerId) {
			_setOriginalCustomerId = true;

			_originalCustomerId = _customerId;
		}

		_customerId = customerId;
	}

	public long getOriginalCustomerId() {
		return _originalCustomerId;
	}

	@JSON
	public long getVisitorId() {
		return _visitorId;
	}

	public void setVisitorId(long visitorId) {
		_columnBitmask |= VISITORID_COLUMN_BITMASK;

		if (!_setOriginalVisitorId) {
			_setOriginalVisitorId = true;

			_originalVisitorId = _visitorId;
		}

		_visitorId = visitorId;
	}

	public long getOriginalVisitorId() {
		return _originalVisitorId;
	}

	@JSON
	public long getAccessRequestStatusId() {
		return _accessRequestStatusId;
	}

	public void setAccessRequestStatusId(long accessRequestStatusId) {
		_accessRequestStatusId = accessRequestStatusId;
	}

	@JSON
	public Date getDateOfVisit() {
		return _dateOfVisit;
	}

	public void setDateOfVisit(Date dateOfVisit) {
		_dateOfVisit = dateOfVisit;
	}

	@JSON
	public long getTentativeTimeIn() {
		return _tentativeTimeIn;
	}

	public void setTentativeTimeIn(long tentativeTimeIn) {
		_tentativeTimeIn = tentativeTimeIn;
	}

	@JSON
	public long getTentativeTimeOut() {
		return _tentativeTimeOut;
	}

	public void setTentativeTimeOut(long tentativeTimeOut) {
		_tentativeTimeOut = tentativeTimeOut;
	}

	@JSON
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	public void setNote(String note) {
		_note = note;
	}

	@JSON
	public boolean getIsExternalVisitor() {
		return _isExternalVisitor;
	}

	public boolean isIsExternalVisitor() {
		return _isExternalVisitor;
	}

	public void setIsExternalVisitor(boolean isExternalVisitor) {
		_isExternalVisitor = isExternalVisitor;
	}

	@JSON
	public boolean getIsActive() {
		return _isActive;
	}

	public boolean isIsActive() {
		return _isActive;
	}

	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	@JSON
	public boolean getOneTimeAccess() {
		return _oneTimeAccess;
	}

	public boolean isOneTimeAccess() {
		return _oneTimeAccess;
	}

	public void setOneTimeAccess(boolean oneTimeAccess) {
		_oneTimeAccess = oneTimeAccess;
	}

	@JSON
	public Date getDateOfVisitGmt() {
		return _dateOfVisitGmt;
	}

	public void setDateOfVisitGmt(Date dateOfVisitGmt) {
		_dateOfVisitGmt = dateOfVisitGmt;
	}

	@JSON
	public Date getDateOfTimeOutGmt() {
		return _dateOfTimeOutGmt;
	}

	public void setDateOfTimeOutGmt(Date dateOfTimeOutGmt) {
		_dateOfTimeOutGmt = dateOfTimeOutGmt;
	}

	@JSON
	public Date getCreatedOn() {
		return _createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	public Date getUpdatedOn() {
		return _updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		_updatedOn = updatedOn;
	}

	@JSON
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AccessRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccessRequest toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AccessRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AccessRequestImpl accessRequestImpl = new AccessRequestImpl();

		accessRequestImpl.setId(getId());
		accessRequestImpl.setFacilityId(getFacilityId());
		accessRequestImpl.setCustomerId(getCustomerId());
		accessRequestImpl.setVisitorId(getVisitorId());
		accessRequestImpl.setAccessRequestStatusId(getAccessRequestStatusId());
		accessRequestImpl.setDateOfVisit(getDateOfVisit());
		accessRequestImpl.setTentativeTimeIn(getTentativeTimeIn());
		accessRequestImpl.setTentativeTimeOut(getTentativeTimeOut());
		accessRequestImpl.setNote(getNote());
		accessRequestImpl.setIsExternalVisitor(getIsExternalVisitor());
		accessRequestImpl.setIsActive(getIsActive());
		accessRequestImpl.setOneTimeAccess(getOneTimeAccess());
		accessRequestImpl.setDateOfVisitGmt(getDateOfVisitGmt());
		accessRequestImpl.setDateOfTimeOutGmt(getDateOfTimeOutGmt());
		accessRequestImpl.setCreatedOn(getCreatedOn());
		accessRequestImpl.setCreatedBy(getCreatedBy());
		accessRequestImpl.setUpdatedOn(getUpdatedOn());
		accessRequestImpl.setUpdatedBy(getUpdatedBy());

		accessRequestImpl.resetOriginalValues();

		return accessRequestImpl;
	}

	public int compareTo(AccessRequest accessRequest) {
		long primaryKey = accessRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AccessRequest accessRequest = null;

		try {
			accessRequest = (AccessRequest)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = accessRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AccessRequestModelImpl accessRequestModelImpl = this;

		accessRequestModelImpl._originalFacilityId = accessRequestModelImpl._facilityId;

		accessRequestModelImpl._setOriginalFacilityId = false;

		accessRequestModelImpl._originalCustomerId = accessRequestModelImpl._customerId;

		accessRequestModelImpl._setOriginalCustomerId = false;

		accessRequestModelImpl._originalVisitorId = accessRequestModelImpl._visitorId;

		accessRequestModelImpl._setOriginalVisitorId = false;

		accessRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AccessRequest> toCacheModel() {
		AccessRequestCacheModel accessRequestCacheModel = new AccessRequestCacheModel();

		accessRequestCacheModel.id = getId();

		accessRequestCacheModel.facilityId = getFacilityId();

		accessRequestCacheModel.customerId = getCustomerId();

		accessRequestCacheModel.visitorId = getVisitorId();

		accessRequestCacheModel.accessRequestStatusId = getAccessRequestStatusId();

		Date dateOfVisit = getDateOfVisit();

		if (dateOfVisit != null) {
			accessRequestCacheModel.dateOfVisit = dateOfVisit.getTime();
		}
		else {
			accessRequestCacheModel.dateOfVisit = Long.MIN_VALUE;
		}

		accessRequestCacheModel.tentativeTimeIn = getTentativeTimeIn();

		accessRequestCacheModel.tentativeTimeOut = getTentativeTimeOut();

		accessRequestCacheModel.note = getNote();

		String note = accessRequestCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			accessRequestCacheModel.note = null;
		}

		accessRequestCacheModel.isExternalVisitor = getIsExternalVisitor();

		accessRequestCacheModel.isActive = getIsActive();

		accessRequestCacheModel.oneTimeAccess = getOneTimeAccess();

		Date dateOfVisitGmt = getDateOfVisitGmt();

		if (dateOfVisitGmt != null) {
			accessRequestCacheModel.dateOfVisitGmt = dateOfVisitGmt.getTime();
		}
		else {
			accessRequestCacheModel.dateOfVisitGmt = Long.MIN_VALUE;
		}

		Date dateOfTimeOutGmt = getDateOfTimeOutGmt();

		if (dateOfTimeOutGmt != null) {
			accessRequestCacheModel.dateOfTimeOutGmt = dateOfTimeOutGmt.getTime();
		}
		else {
			accessRequestCacheModel.dateOfTimeOutGmt = Long.MIN_VALUE;
		}

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			accessRequestCacheModel.createdOn = createdOn.getTime();
		}
		else {
			accessRequestCacheModel.createdOn = Long.MIN_VALUE;
		}

		accessRequestCacheModel.createdBy = getCreatedBy();

		String createdBy = accessRequestCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			accessRequestCacheModel.createdBy = null;
		}

		Date updatedOn = getUpdatedOn();

		if (updatedOn != null) {
			accessRequestCacheModel.updatedOn = updatedOn.getTime();
		}
		else {
			accessRequestCacheModel.updatedOn = Long.MIN_VALUE;
		}

		accessRequestCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = accessRequestCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			accessRequestCacheModel.updatedBy = null;
		}

		return accessRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", facilityId=");
		sb.append(getFacilityId());
		sb.append(", customerId=");
		sb.append(getCustomerId());
		sb.append(", visitorId=");
		sb.append(getVisitorId());
		sb.append(", accessRequestStatusId=");
		sb.append(getAccessRequestStatusId());
		sb.append(", dateOfVisit=");
		sb.append(getDateOfVisit());
		sb.append(", tentativeTimeIn=");
		sb.append(getTentativeTimeIn());
		sb.append(", tentativeTimeOut=");
		sb.append(getTentativeTimeOut());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", isExternalVisitor=");
		sb.append(getIsExternalVisitor());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", oneTimeAccess=");
		sb.append(getOneTimeAccess());
		sb.append(", dateOfVisitGmt=");
		sb.append(getDateOfVisitGmt());
		sb.append(", dateOfTimeOutGmt=");
		sb.append(getDateOfTimeOutGmt());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedOn=");
		sb.append(getUpdatedOn());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.AccessRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilityId</column-name><column-value><![CDATA[");
		sb.append(getFacilityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitorId</column-name><column-value><![CDATA[");
		sb.append(getVisitorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessRequestStatusId</column-name><column-value><![CDATA[");
		sb.append(getAccessRequestStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfVisit</column-name><column-value><![CDATA[");
		sb.append(getDateOfVisit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tentativeTimeIn</column-name><column-value><![CDATA[");
		sb.append(getTentativeTimeIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tentativeTimeOut</column-name><column-value><![CDATA[");
		sb.append(getTentativeTimeOut());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isExternalVisitor</column-name><column-value><![CDATA[");
		sb.append(getIsExternalVisitor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oneTimeAccess</column-name><column-value><![CDATA[");
		sb.append(getOneTimeAccess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfVisitGmt</column-name><column-value><![CDATA[");
		sb.append(getDateOfVisitGmt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfTimeOutGmt</column-name><column-value><![CDATA[");
		sb.append(getDateOfTimeOutGmt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedOn</column-name><column-value><![CDATA[");
		sb.append(getUpdatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AccessRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AccessRequest.class
		};
	private long _id;
	private long _facilityId;
	private long _originalFacilityId;
	private boolean _setOriginalFacilityId;
	private long _customerId;
	private long _originalCustomerId;
	private boolean _setOriginalCustomerId;
	private long _visitorId;
	private long _originalVisitorId;
	private boolean _setOriginalVisitorId;
	private long _accessRequestStatusId;
	private Date _dateOfVisit;
	private long _tentativeTimeIn;
	private long _tentativeTimeOut;
	private String _note;
	private boolean _isExternalVisitor;
	private boolean _isActive;
	private boolean _oneTimeAccess;
	private Date _dateOfVisitGmt;
	private Date _dateOfTimeOutGmt;
	private Date _createdOn;
	private String _createdBy;
	private Date _updatedOn;
	private String _updatedBy;
	private long _columnBitmask;
	private AccessRequest _escapedModelProxy;
}
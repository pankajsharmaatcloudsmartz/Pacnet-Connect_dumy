/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.pacnet.connect.model.FacilityExternalVisitor;
import com.pacnet.connect.model.FacilityExternalVisitorModel;
import com.pacnet.connect.model.FacilityExternalVisitorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FacilityExternalVisitor service. Represents a row in the &quot;Facility_External_Visitor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.FacilityExternalVisitorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FacilityExternalVisitorImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see FacilityExternalVisitorImpl
 * @see com.pacnet.connect.model.FacilityExternalVisitor
 * @see com.pacnet.connect.model.FacilityExternalVisitorModel
 * @generated
 */
@JSON(strict = true)
public class FacilityExternalVisitorModelImpl extends BaseModelImpl<FacilityExternalVisitor>
	implements FacilityExternalVisitorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a facility external visitor model instance should use the {@link com.pacnet.connect.model.FacilityExternalVisitor} interface instead.
	 */
	public static final String TABLE_NAME = "Facility_External_Visitor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "Facility_ID", Types.BIGINT },
			{ "Access_Request_ID", Types.BIGINT },
			{ "Name", Types.VARCHAR },
			{ "Mobile_Number", Types.VARCHAR },
			{ "Email", Types.VARCHAR },
			{ "Address", Types.VARCHAR },
			{ "Company_Name", Types.VARCHAR },
			{ "document_type", Types.VARCHAR },
			{ "document_Id", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "IsActive", Types.BOOLEAN },
			{ "Created_On", Types.TIMESTAMP },
			{ "Created_By", Types.VARCHAR },
			{ "Updated_On", Types.TIMESTAMP },
			{ "Updated_By", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Facility_External_Visitor (ID LONG not null primary key IDENTITY,Facility_ID LONG,Access_Request_ID LONG,Name VARCHAR(75) null,Mobile_Number VARCHAR(75) null,Email VARCHAR(75) null,Address VARCHAR(75) null,Company_Name VARCHAR(75) null,document_type VARCHAR(75) null,document_Id VARCHAR(75) null,remarks VARCHAR(75) null,IsActive BOOLEAN,Created_On DATE null,Created_By VARCHAR(75) null,Updated_On DATE null,Updated_By VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Facility_External_Visitor";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.FacilityExternalVisitor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.FacilityExternalVisitor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.FacilityExternalVisitor"),
			true);
	public static long ACCESSREQUESTID_COLUMN_BITMASK = 1L;
	public static long FACILITYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FacilityExternalVisitor toModel(
		FacilityExternalVisitorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FacilityExternalVisitor model = new FacilityExternalVisitorImpl();

		model.setId(soapModel.getId());
		model.setFacilityId(soapModel.getFacilityId());
		model.setAccessRequestId(soapModel.getAccessRequestId());
		model.setName(soapModel.getName());
		model.setMobileNumber(soapModel.getMobileNumber());
		model.setEmail(soapModel.getEmail());
		model.setAddress(soapModel.getAddress());
		model.setCompanyName(soapModel.getCompanyName());
		model.setDocumentType(soapModel.getDocumentType());
		model.setDocumentId(soapModel.getDocumentId());
		model.setRemarks(soapModel.getRemarks());
		model.setIsActive(soapModel.getIsActive());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedOn(soapModel.getUpdatedOn());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FacilityExternalVisitor> toModels(
		FacilityExternalVisitorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FacilityExternalVisitor> models = new ArrayList<FacilityExternalVisitor>(soapModels.length);

		for (FacilityExternalVisitorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.FacilityExternalVisitor"));

	public FacilityExternalVisitorModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FacilityExternalVisitor.class;
	}

	public String getModelClassName() {
		return FacilityExternalVisitor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("facilityId", getFacilityId());
		attributes.put("accessRequestId", getAccessRequestId());
		attributes.put("name", getName());
		attributes.put("mobileNumber", getMobileNumber());
		attributes.put("email", getEmail());
		attributes.put("address", getAddress());
		attributes.put("companyName", getCompanyName());
		attributes.put("documentType", getDocumentType());
		attributes.put("documentId", getDocumentId());
		attributes.put("remarks", getRemarks());
		attributes.put("isActive", getIsActive());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedOn", getUpdatedOn());
		attributes.put("updatedBy", getUpdatedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long facilityId = (Long)attributes.get("facilityId");

		if (facilityId != null) {
			setFacilityId(facilityId);
		}

		Long accessRequestId = (Long)attributes.get("accessRequestId");

		if (accessRequestId != null) {
			setAccessRequestId(accessRequestId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String mobileNumber = (String)attributes.get("mobileNumber");

		if (mobileNumber != null) {
			setMobileNumber(mobileNumber);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String documentType = (String)attributes.get("documentType");

		if (documentType != null) {
			setDocumentType(documentType);
		}

		String documentId = (String)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Boolean isActive = (Boolean)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedOn = (Date)attributes.get("updatedOn");

		if (updatedOn != null) {
			setUpdatedOn(updatedOn);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getFacilityId() {
		return _facilityId;
	}

	public void setFacilityId(long facilityId) {
		_columnBitmask |= FACILITYID_COLUMN_BITMASK;

		if (!_setOriginalFacilityId) {
			_setOriginalFacilityId = true;

			_originalFacilityId = _facilityId;
		}

		_facilityId = facilityId;
	}

	public long getOriginalFacilityId() {
		return _originalFacilityId;
	}

	@JSON
	public long getAccessRequestId() {
		return _accessRequestId;
	}

	public void setAccessRequestId(long accessRequestId) {
		_columnBitmask |= ACCESSREQUESTID_COLUMN_BITMASK;

		if (!_setOriginalAccessRequestId) {
			_setOriginalAccessRequestId = true;

			_originalAccessRequestId = _accessRequestId;
		}

		_accessRequestId = accessRequestId;
	}

	public long getOriginalAccessRequestId() {
		return _originalAccessRequestId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobileNumber;
		}
	}

	public void setMobileNumber(String mobileNumber) {
		_mobileNumber = mobileNumber;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	public String getDocumentType() {
		if (_documentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentType;
		}
	}

	public void setDocumentType(String documentType) {
		_documentType = documentType;
	}

	@JSON
	public String getDocumentId() {
		if (_documentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentId;
		}
	}

	public void setDocumentId(String documentId) {
		_documentId = documentId;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public boolean getIsActive() {
		return _isActive;
	}

	public boolean isIsActive() {
		return _isActive;
	}

	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	@JSON
	public Date getCreatedOn() {
		return _createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	public Date getUpdatedOn() {
		return _updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		_updatedOn = updatedOn;
	}

	@JSON
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FacilityExternalVisitor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FacilityExternalVisitor toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (FacilityExternalVisitor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		FacilityExternalVisitorImpl facilityExternalVisitorImpl = new FacilityExternalVisitorImpl();

		facilityExternalVisitorImpl.setId(getId());
		facilityExternalVisitorImpl.setFacilityId(getFacilityId());
		facilityExternalVisitorImpl.setAccessRequestId(getAccessRequestId());
		facilityExternalVisitorImpl.setName(getName());
		facilityExternalVisitorImpl.setMobileNumber(getMobileNumber());
		facilityExternalVisitorImpl.setEmail(getEmail());
		facilityExternalVisitorImpl.setAddress(getAddress());
		facilityExternalVisitorImpl.setCompanyName(getCompanyName());
		facilityExternalVisitorImpl.setDocumentType(getDocumentType());
		facilityExternalVisitorImpl.setDocumentId(getDocumentId());
		facilityExternalVisitorImpl.setRemarks(getRemarks());
		facilityExternalVisitorImpl.setIsActive(getIsActive());
		facilityExternalVisitorImpl.setCreatedOn(getCreatedOn());
		facilityExternalVisitorImpl.setCreatedBy(getCreatedBy());
		facilityExternalVisitorImpl.setUpdatedOn(getUpdatedOn());
		facilityExternalVisitorImpl.setUpdatedBy(getUpdatedBy());

		facilityExternalVisitorImpl.resetOriginalValues();

		return facilityExternalVisitorImpl;
	}

	public int compareTo(FacilityExternalVisitor facilityExternalVisitor) {
		long primaryKey = facilityExternalVisitor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		FacilityExternalVisitor facilityExternalVisitor = null;

		try {
			facilityExternalVisitor = (FacilityExternalVisitor)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = facilityExternalVisitor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FacilityExternalVisitorModelImpl facilityExternalVisitorModelImpl = this;

		facilityExternalVisitorModelImpl._originalFacilityId = facilityExternalVisitorModelImpl._facilityId;

		facilityExternalVisitorModelImpl._setOriginalFacilityId = false;

		facilityExternalVisitorModelImpl._originalAccessRequestId = facilityExternalVisitorModelImpl._accessRequestId;

		facilityExternalVisitorModelImpl._setOriginalAccessRequestId = false;

		facilityExternalVisitorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FacilityExternalVisitor> toCacheModel() {
		FacilityExternalVisitorCacheModel facilityExternalVisitorCacheModel = new FacilityExternalVisitorCacheModel();

		facilityExternalVisitorCacheModel.id = getId();

		facilityExternalVisitorCacheModel.facilityId = getFacilityId();

		facilityExternalVisitorCacheModel.accessRequestId = getAccessRequestId();

		facilityExternalVisitorCacheModel.name = getName();

		String name = facilityExternalVisitorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			facilityExternalVisitorCacheModel.name = null;
		}

		facilityExternalVisitorCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = facilityExternalVisitorCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			facilityExternalVisitorCacheModel.mobileNumber = null;
		}

		facilityExternalVisitorCacheModel.email = getEmail();

		String email = facilityExternalVisitorCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			facilityExternalVisitorCacheModel.email = null;
		}

		facilityExternalVisitorCacheModel.address = getAddress();

		String address = facilityExternalVisitorCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			facilityExternalVisitorCacheModel.address = null;
		}

		facilityExternalVisitorCacheModel.companyName = getCompanyName();

		String companyName = facilityExternalVisitorCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			facilityExternalVisitorCacheModel.companyName = null;
		}

		facilityExternalVisitorCacheModel.documentType = getDocumentType();

		String documentType = facilityExternalVisitorCacheModel.documentType;

		if ((documentType != null) && (documentType.length() == 0)) {
			facilityExternalVisitorCacheModel.documentType = null;
		}

		facilityExternalVisitorCacheModel.documentId = getDocumentId();

		String documentId = facilityExternalVisitorCacheModel.documentId;

		if ((documentId != null) && (documentId.length() == 0)) {
			facilityExternalVisitorCacheModel.documentId = null;
		}

		facilityExternalVisitorCacheModel.remarks = getRemarks();

		String remarks = facilityExternalVisitorCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			facilityExternalVisitorCacheModel.remarks = null;
		}

		facilityExternalVisitorCacheModel.isActive = getIsActive();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			facilityExternalVisitorCacheModel.createdOn = createdOn.getTime();
		}
		else {
			facilityExternalVisitorCacheModel.createdOn = Long.MIN_VALUE;
		}

		facilityExternalVisitorCacheModel.createdBy = getCreatedBy();

		String createdBy = facilityExternalVisitorCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			facilityExternalVisitorCacheModel.createdBy = null;
		}

		Date updatedOn = getUpdatedOn();

		if (updatedOn != null) {
			facilityExternalVisitorCacheModel.updatedOn = updatedOn.getTime();
		}
		else {
			facilityExternalVisitorCacheModel.updatedOn = Long.MIN_VALUE;
		}

		facilityExternalVisitorCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = facilityExternalVisitorCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			facilityExternalVisitorCacheModel.updatedBy = null;
		}

		return facilityExternalVisitorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", facilityId=");
		sb.append(getFacilityId());
		sb.append(", accessRequestId=");
		sb.append(getAccessRequestId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", mobileNumber=");
		sb.append(getMobileNumber());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", documentType=");
		sb.append(getDocumentType());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedOn=");
		sb.append(getUpdatedOn());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.FacilityExternalVisitor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilityId</column-name><column-value><![CDATA[");
		sb.append(getFacilityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessRequestId</column-name><column-value><![CDATA[");
		sb.append(getAccessRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobileNumber</column-name><column-value><![CDATA[");
		sb.append(getMobileNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentType</column-name><column-value><![CDATA[");
		sb.append(getDocumentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedOn</column-name><column-value><![CDATA[");
		sb.append(getUpdatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FacilityExternalVisitor.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			FacilityExternalVisitor.class
		};
	private long _id;
	private long _facilityId;
	private long _originalFacilityId;
	private boolean _setOriginalFacilityId;
	private long _accessRequestId;
	private long _originalAccessRequestId;
	private boolean _setOriginalAccessRequestId;
	private String _name;
	private String _mobileNumber;
	private String _email;
	private String _address;
	private String _companyName;
	private String _documentType;
	private String _documentId;
	private String _remarks;
	private boolean _isActive;
	private Date _createdOn;
	private String _createdBy;
	private Date _updatedOn;
	private String _updatedBy;
	private long _columnBitmask;
	private FacilityExternalVisitor _escapedModelProxy;
}
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pacnet.connect.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.pacnet.connect.model.AccessLog;
import com.pacnet.connect.model.AccessLogModel;
import com.pacnet.connect.model.AccessLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AccessLog service. Represents a row in the &quot;Access_Log&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.pacnet.connect.model.AccessLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccessLogImpl}.
 * </p>
 *
 * @author CloudSmartz
 * @see AccessLogImpl
 * @see com.pacnet.connect.model.AccessLog
 * @see com.pacnet.connect.model.AccessLogModel
 * @generated
 */
@JSON(strict = true)
public class AccessLogModelImpl extends BaseModelImpl<AccessLog>
	implements AccessLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a access log model instance should use the {@link com.pacnet.connect.model.AccessLog} interface instead.
	 */
	public static final String TABLE_NAME = "Access_Log";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "Access_Request_ID", Types.BIGINT },
			{ "Facility_User_Mapping_ID", Types.BIGINT },
			{ "Actual_Date_OF_Visit", Types.TIMESTAMP },
			{ "Time_In", Types.BIGINT },
			{ "Time_Out", Types.BIGINT },
			{ "Note", Types.VARCHAR },
			{ "IsActive", Types.BOOLEAN },
			{ "Created_On", Types.TIMESTAMP },
			{ "Created_By", Types.VARCHAR },
			{ "Updated_On", Types.TIMESTAMP },
			{ "Updated_By", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Access_Log (ID LONG not null primary key IDENTITY,Access_Request_ID LONG,Facility_User_Mapping_ID LONG,Actual_Date_OF_Visit DATE null,Time_In LONG,Time_Out LONG,Note VARCHAR(75) null,IsActive BOOLEAN,Created_On DATE null,Created_By VARCHAR(75) null,Updated_On DATE null,Updated_By VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Access_Log";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.pacnet.connect.model.AccessLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.pacnet.connect.model.AccessLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.pacnet.connect.model.AccessLog"),
			true);
	public static long ACCESSREQUESTID_COLUMN_BITMASK = 1L;
	public static long ACTUALDATEOFVISIT_COLUMN_BITMASK = 2L;
	public static long FACILITYUSERMAPPINGID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AccessLog toModel(AccessLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AccessLog model = new AccessLogImpl();

		model.setId(soapModel.getId());
		model.setAccessRequestId(soapModel.getAccessRequestId());
		model.setFacilityUserMappingId(soapModel.getFacilityUserMappingId());
		model.setActualDateOfVisit(soapModel.getActualDateOfVisit());
		model.setTimeIn(soapModel.getTimeIn());
		model.setTimeOut(soapModel.getTimeOut());
		model.setNote(soapModel.getNote());
		model.setIsActive(soapModel.getIsActive());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedOn(soapModel.getUpdatedOn());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AccessLog> toModels(AccessLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AccessLog> models = new ArrayList<AccessLog>(soapModels.length);

		for (AccessLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.pacnet.connect.model.AccessLog"));

	public AccessLogModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AccessLog.class;
	}

	public String getModelClassName() {
		return AccessLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("accessRequestId", getAccessRequestId());
		attributes.put("facilityUserMappingId", getFacilityUserMappingId());
		attributes.put("actualDateOfVisit", getActualDateOfVisit());
		attributes.put("timeIn", getTimeIn());
		attributes.put("timeOut", getTimeOut());
		attributes.put("note", getNote());
		attributes.put("isActive", getIsActive());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedOn", getUpdatedOn());
		attributes.put("updatedBy", getUpdatedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long accessRequestId = (Long)attributes.get("accessRequestId");

		if (accessRequestId != null) {
			setAccessRequestId(accessRequestId);
		}

		Long facilityUserMappingId = (Long)attributes.get(
				"facilityUserMappingId");

		if (facilityUserMappingId != null) {
			setFacilityUserMappingId(facilityUserMappingId);
		}

		Date actualDateOfVisit = (Date)attributes.get("actualDateOfVisit");

		if (actualDateOfVisit != null) {
			setActualDateOfVisit(actualDateOfVisit);
		}

		Long timeIn = (Long)attributes.get("timeIn");

		if (timeIn != null) {
			setTimeIn(timeIn);
		}

		Long timeOut = (Long)attributes.get("timeOut");

		if (timeOut != null) {
			setTimeOut(timeOut);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Boolean isActive = (Boolean)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedOn = (Date)attributes.get("updatedOn");

		if (updatedOn != null) {
			setUpdatedOn(updatedOn);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getAccessRequestId() {
		return _accessRequestId;
	}

	public void setAccessRequestId(long accessRequestId) {
		_columnBitmask |= ACCESSREQUESTID_COLUMN_BITMASK;

		if (!_setOriginalAccessRequestId) {
			_setOriginalAccessRequestId = true;

			_originalAccessRequestId = _accessRequestId;
		}

		_accessRequestId = accessRequestId;
	}

	public long getOriginalAccessRequestId() {
		return _originalAccessRequestId;
	}

	@JSON
	public long getFacilityUserMappingId() {
		return _facilityUserMappingId;
	}

	public void setFacilityUserMappingId(long facilityUserMappingId) {
		_columnBitmask |= FACILITYUSERMAPPINGID_COLUMN_BITMASK;

		if (!_setOriginalFacilityUserMappingId) {
			_setOriginalFacilityUserMappingId = true;

			_originalFacilityUserMappingId = _facilityUserMappingId;
		}

		_facilityUserMappingId = facilityUserMappingId;
	}

	public long getOriginalFacilityUserMappingId() {
		return _originalFacilityUserMappingId;
	}

	@JSON
	public Date getActualDateOfVisit() {
		return _actualDateOfVisit;
	}

	public void setActualDateOfVisit(Date actualDateOfVisit) {
		_columnBitmask |= ACTUALDATEOFVISIT_COLUMN_BITMASK;

		if (_originalActualDateOfVisit == null) {
			_originalActualDateOfVisit = _actualDateOfVisit;
		}

		_actualDateOfVisit = actualDateOfVisit;
	}

	public Date getOriginalActualDateOfVisit() {
		return _originalActualDateOfVisit;
	}

	@JSON
	public long getTimeIn() {
		return _timeIn;
	}

	public void setTimeIn(long timeIn) {
		_timeIn = timeIn;
	}

	@JSON
	public long getTimeOut() {
		return _timeOut;
	}

	public void setTimeOut(long timeOut) {
		_timeOut = timeOut;
	}

	@JSON
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	public void setNote(String note) {
		_note = note;
	}

	@JSON
	public boolean getIsActive() {
		return _isActive;
	}

	public boolean isIsActive() {
		return _isActive;
	}

	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	@JSON
	public Date getCreatedOn() {
		return _createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	public Date getUpdatedOn() {
		return _updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		_updatedOn = updatedOn;
	}

	@JSON
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AccessLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccessLog toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AccessLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AccessLogImpl accessLogImpl = new AccessLogImpl();

		accessLogImpl.setId(getId());
		accessLogImpl.setAccessRequestId(getAccessRequestId());
		accessLogImpl.setFacilityUserMappingId(getFacilityUserMappingId());
		accessLogImpl.setActualDateOfVisit(getActualDateOfVisit());
		accessLogImpl.setTimeIn(getTimeIn());
		accessLogImpl.setTimeOut(getTimeOut());
		accessLogImpl.setNote(getNote());
		accessLogImpl.setIsActive(getIsActive());
		accessLogImpl.setCreatedOn(getCreatedOn());
		accessLogImpl.setCreatedBy(getCreatedBy());
		accessLogImpl.setUpdatedOn(getUpdatedOn());
		accessLogImpl.setUpdatedBy(getUpdatedBy());

		accessLogImpl.resetOriginalValues();

		return accessLogImpl;
	}

	public int compareTo(AccessLog accessLog) {
		long primaryKey = accessLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AccessLog accessLog = null;

		try {
			accessLog = (AccessLog)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = accessLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AccessLogModelImpl accessLogModelImpl = this;

		accessLogModelImpl._originalAccessRequestId = accessLogModelImpl._accessRequestId;

		accessLogModelImpl._setOriginalAccessRequestId = false;

		accessLogModelImpl._originalFacilityUserMappingId = accessLogModelImpl._facilityUserMappingId;

		accessLogModelImpl._setOriginalFacilityUserMappingId = false;

		accessLogModelImpl._originalActualDateOfVisit = accessLogModelImpl._actualDateOfVisit;

		accessLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AccessLog> toCacheModel() {
		AccessLogCacheModel accessLogCacheModel = new AccessLogCacheModel();

		accessLogCacheModel.id = getId();

		accessLogCacheModel.accessRequestId = getAccessRequestId();

		accessLogCacheModel.facilityUserMappingId = getFacilityUserMappingId();

		Date actualDateOfVisit = getActualDateOfVisit();

		if (actualDateOfVisit != null) {
			accessLogCacheModel.actualDateOfVisit = actualDateOfVisit.getTime();
		}
		else {
			accessLogCacheModel.actualDateOfVisit = Long.MIN_VALUE;
		}

		accessLogCacheModel.timeIn = getTimeIn();

		accessLogCacheModel.timeOut = getTimeOut();

		accessLogCacheModel.note = getNote();

		String note = accessLogCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			accessLogCacheModel.note = null;
		}

		accessLogCacheModel.isActive = getIsActive();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			accessLogCacheModel.createdOn = createdOn.getTime();
		}
		else {
			accessLogCacheModel.createdOn = Long.MIN_VALUE;
		}

		accessLogCacheModel.createdBy = getCreatedBy();

		String createdBy = accessLogCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			accessLogCacheModel.createdBy = null;
		}

		Date updatedOn = getUpdatedOn();

		if (updatedOn != null) {
			accessLogCacheModel.updatedOn = updatedOn.getTime();
		}
		else {
			accessLogCacheModel.updatedOn = Long.MIN_VALUE;
		}

		accessLogCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = accessLogCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			accessLogCacheModel.updatedBy = null;
		}

		return accessLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", accessRequestId=");
		sb.append(getAccessRequestId());
		sb.append(", facilityUserMappingId=");
		sb.append(getFacilityUserMappingId());
		sb.append(", actualDateOfVisit=");
		sb.append(getActualDateOfVisit());
		sb.append(", timeIn=");
		sb.append(getTimeIn());
		sb.append(", timeOut=");
		sb.append(getTimeOut());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedOn=");
		sb.append(getUpdatedOn());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.pacnet.connect.model.AccessLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessRequestId</column-name><column-value><![CDATA[");
		sb.append(getAccessRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilityUserMappingId</column-name><column-value><![CDATA[");
		sb.append(getFacilityUserMappingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualDateOfVisit</column-name><column-value><![CDATA[");
		sb.append(getActualDateOfVisit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeIn</column-name><column-value><![CDATA[");
		sb.append(getTimeIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOut</column-name><column-value><![CDATA[");
		sb.append(getTimeOut());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedOn</column-name><column-value><![CDATA[");
		sb.append(getUpdatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AccessLog.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AccessLog.class
		};
	private long _id;
	private long _accessRequestId;
	private long _originalAccessRequestId;
	private boolean _setOriginalAccessRequestId;
	private long _facilityUserMappingId;
	private long _originalFacilityUserMappingId;
	private boolean _setOriginalFacilityUserMappingId;
	private Date _actualDateOfVisit;
	private Date _originalActualDateOfVisit;
	private long _timeIn;
	private long _timeOut;
	private String _note;
	private boolean _isActive;
	private Date _createdOn;
	private String _createdBy;
	private Date _updatedOn;
	private String _updatedBy;
	private long _columnBitmask;
	private AccessLog _escapedModelProxy;
}